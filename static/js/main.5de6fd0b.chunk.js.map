{"version":3,"sources":["Recipe.js","App.js","serviceWorker.js","index.js"],"names":["Recipe","title","calories","image","ingredients","className","map","ingredient","text","src","alt","App","useState","recipes","setRecipes","search","setSearch","query","setQuery","useEffect","getRecipes","URL","a","fetch","response","json","data","console","log","hits","onSubmit","e","preventDefault","type","value","onChange","target","placeholder","recipe","key","totalWeight","label","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"0RAwBeA,G,YArBF,SAAC,GAAuC,IAAtCC,EAAqC,EAArCA,MAAMC,EAA+B,EAA/BA,SAASC,EAAsB,EAAtBA,MAAMC,EAAgB,EAAhBA,YAChC,OACI,yBAAKC,UAAU,wBACX,wBAAIA,UAAU,iBAAkBJ,GAChC,4BACKG,EAAYE,KAAI,SAAAC,GAAU,OACvB,4BAAKA,EAAWC,UAGxB,yBAAKH,UAAU,YACX,+CACA,2BAAIH,IAER,yBAAKG,UAAU,wBACX,yBAAKA,UAAU,eAAeI,IAAKN,EAAOO,IAAI,SCkD/CC,EA/DH,WAEV,IAFe,EAMcC,mBAAS,IANvB,mBAMRC,EANQ,KAMAC,EANA,OAOYF,mBAAS,IAPrB,mBAORG,EAPQ,KAODC,EAPC,OAQUJ,mBAAS,WARnB,mBAQRK,EARQ,KAQFC,EARE,KAUfC,qBAAU,WACRC,MAEA,CAACH,IAKH,IAAII,EAAG,0CAAsCJ,EAAtC,mBAhBM,WAgBN,oBAfO,oCAgBRG,EAAU,uCAAG,8BAAAE,EAAA,sEACIC,MAAMF,GADV,cACbG,EADa,gBAEAA,EAASC,OAFT,OAEbC,EAFa,OAGjBC,QAAQC,IAAIF,EAAKG,MACjBf,EAAWY,EAAKG,MAJC,2CAAH,qDAkBhB,OACE,yBAAKxB,UAAY,OACf,wBAAIA,UAAU,UAAU,4EACxB,0BAAMyB,SAVM,SAAAC,GAChBA,EAAEC,iBACFd,EAASH,GACTC,EAAU,KAOqBX,UAAU,eACnC,2BAAOA,UAAY,aAAa4B,KAAK,OAAOC,MAAOnB,EAAQoB,SAf9C,SAAAJ,GACnBf,EAAUe,EAAEK,OAAOF,QAcsEG,YAAY,qBAC/F,4BACAhC,UAAU,gBACT4B,KAAO,UAFR,WAMJ,yBAAK5B,UAAY,WACdQ,EAAQP,KAAI,SAAAgC,GAAM,OACjB,kBAAC,EAAD,CACEC,IAAOD,EAAOA,OAAOE,YACrBvC,MAAQqC,EAAOA,OAAOG,MACtBvC,SAAYoC,EAAOA,OAAOpC,SAC1BC,MAAQmC,EAAOA,OAAOnC,MACtBC,YAAekC,EAAOA,OAAOlC,oBC/CnBsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhC,QAAQgC,MAAMA,EAAMC,c","file":"static/js/main.5de6fd0b.chunk.js","sourcesContent":["import React  from \"react\";\r\nimport './Recipe.css'\r\n\r\nvar Recipe = ({title,calories,image,ingredients}) =>{\r\n    return(\r\n        <div className=\"recipe grow shadow-4\" >\r\n            <h1 className=\"recipe-header\" >{title}</h1>\r\n            <ol>\r\n                {ingredients.map(ingredient =>(\r\n                    <li>{ingredient.text}</li>\r\n                ))}\r\n            </ol>\r\n            <div className=\"Calories\" >\r\n                <span>Calories:-   </span>\r\n                <p>{calories}</p>\r\n            </div>\r\n            <div className=\"contain-recipe-image\" >\r\n                <img className=\"recipe-image\" src={image} alt=\"\" />\r\n            </div>\r\n        </div>\r\n    );  \r\n}\r\n\r\n\r\nexport default Recipe;","import React,{useEffect,useState} from 'react';\nimport './App.css';\nimport Recipe from \"./Recipe\";\n\nconst App = () =>{\n\n  var API_ID = \"c6798e68\";\n  var API_KEY = \"cbb865d4e43a1640eab07cc8356d7c53\";\n\n\n  const [recipes,setRecipes] = useState([]);\n  const [search,setSearch] = useState(\"\");\n  const [query,setQuery] = useState('chicken');\n\n  useEffect(()=>{\n    getRecipes();\n    // eslint-disable-next-line\n  },[query]);\n\n\n\n\n  var URL = `https://api.edamam.com/search?q=${query}&app_id=${API_ID}&app_key=${API_KEY}`;\n  const getRecipes = async () => {\n    var response = await fetch(URL);\n    var data = await response.json();\n    console.log(data.hits);\n    setRecipes(data.hits);\n  }\n\nconst updateSearch = e => {\n  setSearch(e.target.value);\n}\n\nconst getSearch = e =>{\n  e.preventDefault();\n  setQuery(search);\n  setSearch(\"\");\n}\n  \n\n  return(\n    <div className = \"App\" >\n      <h3 className=\"App-h3\" ><em>Search Recipes of your Favourite Food Item.</em></h3>\n      <form onSubmit={getSearch} className=\"search-form\" >\n        <input className = \"search-bar\" type=\"text\" value={search} onChange={updateSearch} placeholder=\"Search Food Item\" />\n        <button \n        className=\"search-button\"\n         type = \"submit\" >\n           Search\n        </button>\n      </form>\n    <div className = \"Recipes\" >\n      {recipes.map(recipe=>(\n        <Recipe \n          key = {recipe.recipe.totalWeight}\n          title= {recipe.recipe.label}\n          calories = {recipe.recipe.calories}\n          image= {recipe.recipe.image}\n          ingredients = {recipe.recipe.ingredients}\n        />\n      ))}\n    </div>\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n  "],"sourceRoot":""}